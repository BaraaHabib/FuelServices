// <auto-generated />
using System;
using DBContext.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FuelServices.DBContext.Migrations
{
    [DbContext(typeof(AirportCoreContext))]
    partial class AirportCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DBContext.Models.Advertisement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdvertisementCategoryId");

                    b.Property<int?>("AdvertisementOwnerId");

                    b.Property<int?>("AdvertisementTypeId")
                        .IsRequired();

                    b.Property<string>("AnchorUrl");

                    b.Property<string>("Caption");

                    b.Property<int?>("CaptionClicks")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<float?>("Price")
                        .IsRequired();

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementCategoryId");

                    b.HasIndex("AdvertisementOwnerId");

                    b.HasIndex("AdvertisementTypeId");

                    b.ToTable("Advertisement");
                });

            modelBuilder.Entity("DBContext.Models.AdvertisementCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AdvertisementCategory");
                });

            modelBuilder.Entity("DBContext.Models.AdvertisementOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Fax");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("([UserId] IS NOT NULL)");

                    b.ToTable("AdvertisementOwner");
                });

            modelBuilder.Entity("DBContext.Models.AdvertisementProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdvertisementId")
                        .IsRequired();

                    b.Property<int?>("AdvertisementTypePropertyId")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Unit");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.HasIndex("AdvertisementTypePropertyId");

                    b.ToTable("AdvertisementProperty");
                });

            modelBuilder.Entity("DBContext.Models.AdvertisementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsValid");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AdvertisementType");
                });

            modelBuilder.Entity("DBContext.Models.AdvertisementTypeProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AdvertisementTypeProperty");
                });

            modelBuilder.Entity("DBContext.Models.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId");

                    b.Property<string>("Continent");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("Created");

                    b.Property<float?>("Elevation");

                    b.Property<string>("Iata")
                        .HasColumnName("IATA");

                    b.Property<string>("Icao")
                        .HasColumnName("ICAO");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("IsoCountry");

                    b.Property<string>("IsoRegion");

                    b.Property<int>("ItemOrder");

                    b.Property<float?>("Lat");

                    b.Property<float?>("Long");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Municipality");

                    b.Property<string>("Name");

                    b.Property<int?>("NearestCityId");

                    b.Property<string>("Type");

                    b.Property<float?>("Variation");

                    b.Property<int?>("Views");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NearestCityId");

                    b.ToTable("Airport");
                });

            modelBuilder.Entity("DBContext.Models.AirportOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AirportId");

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("OfferId")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.Property<string>("PriceUnit")
                        .IsRequired();

                    b.Property<int?>("SupplierTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AirportId");

                    b.HasIndex("CityId");

                    b.HasIndex("OfferId");

                    b.HasIndex("SupplierTypeId");

                    b.ToTable("AirportOffer");
                });

            modelBuilder.Entity("DBContext.Models.AirportProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AirportId")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("PropertyId")
                        .IsRequired();

                    b.Property<string>("Unit");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AirportId");

                    b.HasIndex("PropertyId");

                    b.ToTable("AirportProperty");
                });

            modelBuilder.Entity("DBContext.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DBContext.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DBContext.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NameASCII");

                    b.Property<string>("State");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("DBContext.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("DBContext.Models.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CustomerId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("ItemOrder");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<DateTime>("SubmitDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Tel")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("DBContext.Models.ContentManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnchorText");

                    b.Property<string>("AnchorUrl");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("ContentManagement");
                });

            modelBuilder.Entity("DBContext.Models.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Continent");
                });

            modelBuilder.Entity("DBContext.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContinentId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("ISO2");

                    b.Property<string>("ISO3");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DBContext.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("FirstName");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("([UserId] IS NOT NULL)");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("DBContext.Models.CustomerPackagesLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired();

                    b.Property<string>("Address2");

                    b.Property<int?>("CityId")
                        .IsRequired();

                    b.Property<string>("Company");

                    b.Property<int?>("CountryId")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Fax");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("PaymentPackageId");

                    b.Property<string>("Phone1")
                        .IsRequired();

                    b.Property<string>("Phone2");

                    b.Property<string>("PostalCode")
                        .IsRequired();

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentPackageId");

                    b.ToTable("CustomerPackagesLog");
                });

            modelBuilder.Entity("DBContext.Models.EmailBodyDefaultParams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackgroundColor");

                    b.Property<string>("Banner");

                    b.Property<string>("CallbackDisplayText");

                    b.Property<string>("CallbackUrl");

                    b.Property<string>("CardColor");

                    b.Property<string>("ContactEmail");

                    b.Property<DateTime>("Created");

                    b.Property<string>("EmailCaption");

                    b.Property<string>("EmailTypeName");

                    b.Property<string>("FontColor");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<string>("Logo");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("SiteUrl");

                    b.Property<string>("TemplateUrl");

                    b.Property<string>("Title1");

                    b.Property<string>("Title2");

                    b.Property<string>("Title3");

                    b.HasKey("Id");

                    b.ToTable("EmailBodyDefaultParams");
                });

            modelBuilder.Entity("DBContext.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("UnitIn");

                    b.HasKey("Id");

                    b.ToTable("Feature");
                });

            modelBuilder.Entity("DBContext.Models.FuelSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsMiddler");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("([UserId] IS NOT NULL)");

                    b.ToTable("FuelSupplier");
                });

            modelBuilder.Entity("DBContext.Models.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("FuelType");
                });

            modelBuilder.Entity("DBContext.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Exception");

                    b.Property<string>("Level")
                        .HasMaxLength(128);

                    b.Property<string>("LogEvent");

                    b.Property<string>("Message");

                    b.Property<string>("MessageTemplate");

                    b.Property<string>("Properties")
                        .HasColumnType("xml");

                    b.Property<DateTimeOffset>("TimeStamp");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("DBContext.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("DuesTaxesLevies")
                        .IsRequired()
                        .HasColumnName("DuesTaxesLevies");

                    b.Property<DateTime>("EndDate");

                    b.Property<int?>("FuelSupplierId")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FuelSupplierId");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("DBContext.Models.OfferFuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int?>("FuelTypeId")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("OfferId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("OfferId");

                    b.ToTable("OfferFuelType");
                });

            modelBuilder.Entity("DBContext.Models.OfferPartyExcludes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AirportId");

                    b.Property<int?>("AirportOfferId")
                        .IsRequired();

                    b.Property<int?>("CityId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.HasKey("Id");

                    b.HasIndex("AirportId");

                    b.HasIndex("AirportOfferId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("OfferPartyExcludes");
                });

            modelBuilder.Entity("DBContext.Models.OfferProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("OfferId")
                        .IsRequired();

                    b.Property<int?>("PropertyId")
                        .IsRequired();

                    b.Property<string>("Unit");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("PropertyId");

                    b.ToTable("OfferProperties");
                });

            modelBuilder.Entity("DBContext.Models.PaymentPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<double?>("Discount");

                    b.Property<int>("DiscountType");

                    b.Property<string>("DiscountUnit")
                        .HasMaxLength(256);

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsValid");

                    b.Property<int?>("ItemLevel")
                        .IsRequired();

                    b.Property<int>("ItemOrder");

                    b.Property<string>("MainColor")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("Period")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.Property<string>("PriceUnit")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("PaymentPackage");
                });

            modelBuilder.Entity("DBContext.Models.PaymentPackageFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int?>("FeatureId")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("PaymentPackageId")
                        .IsRequired();

                    b.Property<string>("Unit");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("PaymentPackageId");

                    b.ToTable("PaymentPackageFeature");
                });

            modelBuilder.Entity("DBContext.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContentType")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool?>("United")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("DBContext.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AircraftType")
                        .IsRequired();

                    b.Property<int?>("AirportId")
                        .IsRequired();

                    b.Property<DateTime>("ArrivalDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<string>("CallSign")
                        .IsRequired();

                    b.Property<string>("CaptainFmName");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CustomerId")
                        .IsRequired();

                    b.Property<DateTime>("DepartureDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("NameOfOperator");

                    b.Property<string>("Notes");

                    b.Property<int?>("Quantity")
                        .IsRequired();

                    b.Property<string>("RegistrationNumber")
                        .IsRequired();

                    b.Property<DateTime>("SendDate");

                    b.HasKey("Id");

                    b.HasIndex("AirportId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("DBContext.Models.RequestOffers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AirportOfferId")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("OfferId")
                        .IsRequired();

                    b.Property<int>("RStatus")
                        .HasColumnName("RStatus");

                    b.Property<int?>("RequestId")
                        .IsRequired();

                    b.Property<DateTime?>("SupplierConfirmDate");

                    b.HasKey("Id");

                    b.HasIndex("AirportOfferId");

                    b.HasIndex("OfferId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestOffers");
                });

            modelBuilder.Entity("DBContext.Models.SupplierContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactId")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<int?>("FuelSupplierId")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("FuelSupplierId");

                    b.ToTable("SupplierContact");
                });

            modelBuilder.Entity("DBContext.Models.SupplierContactPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int?>("FuelSupplierId")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<string>("JobTitle");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("FuelSupplierId");

                    b.ToTable("SupplierContactPerson");
                });

            modelBuilder.Entity("DBContext.Models.SupplierContactPersonContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactId")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("SupplierContactPersonId")
                        .IsRequired();

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("SupplierContactPersonId");

                    b.ToTable("SupplierContactPersonContact");
                });

            modelBuilder.Entity("DBContext.Models.SupplierProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("PropertyId")
                        .IsRequired();

                    b.Property<int?>("SupplierId")
                        .IsRequired();

                    b.Property<string>("Unit");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierProperties");
                });

            modelBuilder.Entity("DBContext.Models.SupplierReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CustomerId")
                        .IsRequired();

                    b.Property<int?>("FuelSupplierId")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("Rate")
                        .IsRequired();

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FuelSupplierId");

                    b.ToTable("SupplierReview");
                });

            modelBuilder.Entity("DBContext.Models.SupplierType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SupplierType");
                });

            modelBuilder.Entity("FuelServices.DBContext.Models.ResetPasswordToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ResetPasswordCode");

                    b.Property<DateTime>("ResetPasswordCodeValidityEndDate");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(2);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ResetPasswordTokens");
                });

            modelBuilder.Entity("FuelServices.DBContext.Models.SupplierPackagesLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .IsRequired();

                    b.Property<string>("Address2");

                    b.Property<int?>("CityId")
                        .IsRequired();

                    b.Property<string>("Company");

                    b.Property<int?>("CountryId")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Fax");

                    b.Property<int?>("FuelSupplierId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ItemOrder");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("PaymentPackageId");

                    b.Property<string>("Phone1")
                        .IsRequired();

                    b.Property<string>("Phone2");

                    b.Property<string>("PostalCode")
                        .IsRequired();

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("FuelSupplierId");

                    b.HasIndex("PaymentPackageId");

                    b.ToTable("SupplierPackagesLog");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DBContext.Models.Advertisement", b =>
                {
                    b.HasOne("DBContext.Models.AdvertisementCategory", "AdvertisementCategory")
                        .WithMany("Advertisement")
                        .HasForeignKey("AdvertisementCategoryId")
                        .HasConstraintName("FK_Advertisement_AdvertisementCategory")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DBContext.Models.AdvertisementOwner", "AdvertisementOwner")
                        .WithMany("Advertisement")
                        .HasForeignKey("AdvertisementOwnerId")
                        .HasConstraintName("FK_Advertisment_AdvertismentOwner")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DBContext.Models.AdvertisementType", "AdvertisementType")
                        .WithMany("Advertisement")
                        .HasForeignKey("AdvertisementTypeId")
                        .HasConstraintName("FK_Advertisment_AdvertismentType");
                });

            modelBuilder.Entity("DBContext.Models.AdvertisementOwner", b =>
                {
                    b.HasOne("DBContext.Models.Country", "Country")
                        .WithMany("AdvertisementOwner")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_AdvertisementOwner_Country")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DBContext.Models.ApplicationUser", "User")
                        .WithOne("AdvertisementOwner")
                        .HasForeignKey("DBContext.Models.AdvertisementOwner", "UserId")
                        .HasConstraintName("FK_AdvertisementOwner_User")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DBContext.Models.AdvertisementProperty", b =>
                {
                    b.HasOne("DBContext.Models.Advertisement", "Advertisement")
                        .WithMany("AdvertisementProperty")
                        .HasForeignKey("AdvertisementId")
                        .HasConstraintName("FK_AdvertismentProperties_Advertisment");

                    b.HasOne("DBContext.Models.AdvertisementTypeProperty", "AdvertisementTypeProperty")
                        .WithMany("AdvertisementProperty")
                        .HasForeignKey("AdvertisementTypePropertyId")
                        .HasConstraintName("FK_AdvertismentProperties_AdvertismentTypeProperty");
                });

            modelBuilder.Entity("DBContext.Models.Airport", b =>
                {
                    b.HasOne("DBContext.Models.City", "City")
                        .WithMany("AirportCity")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Airport_City");

                    b.HasOne("DBContext.Models.Country", "Country")
                        .WithMany("Airport")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Airport_Country")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DBContext.Models.City", "NearestCity")
                        .WithMany("AirportNearestCity")
                        .HasForeignKey("NearestCityId")
                        .HasConstraintName("FK_Airport_City1");
                });

            modelBuilder.Entity("DBContext.Models.AirportOffer", b =>
                {
                    b.HasOne("DBContext.Models.Airport", "Airport")
                        .WithMany("AirportOffer")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBContext.Models.City", "City")
                        .WithMany("AirportOffer")
                        .HasForeignKey("CityId");

                    b.HasOne("DBContext.Models.Offer", "Offer")
                        .WithMany("AirportOffers")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBContext.Models.SupplierType", "SupplierType")
                        .WithMany("AirportOffer")
                        .HasForeignKey("SupplierTypeId");
                });

            modelBuilder.Entity("DBContext.Models.AirportProperty", b =>
                {
                    b.HasOne("DBContext.Models.Airport", "Airport")
                        .WithMany("AirportProperty")
                        .HasForeignKey("AirportId")
                        .HasConstraintName("FK_AirportPorperties_Airports");

                    b.HasOne("DBContext.Models.Property", "Property")
                        .WithMany("AirportProperty")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK_AirportPorperties_Property");
                });

            modelBuilder.Entity("DBContext.Models.City", b =>
                {
                    b.HasOne("DBContext.Models.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_City_Country")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DBContext.Models.ContactUs", b =>
                {
                    b.HasOne("DBContext.Models.Customer", "Customer")
                        .WithMany("ContactUs")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_ContactUs_Customer")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DBContext.Models.Country", b =>
                {
                    b.HasOne("DBContext.Models.Continent", "Continent")
                        .WithMany("Country")
                        .HasForeignKey("ContinentId")
                        .HasConstraintName("FK_Country_Continent")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DBContext.Models.Customer", b =>
                {
                    b.HasOne("DBContext.Models.Country", "Country")
                        .WithMany("Customer")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Customer_Country")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DBContext.Models.ApplicationUser", "User")
                        .WithOne("Customer")
                        .HasForeignKey("DBContext.Models.Customer", "UserId")
                        .HasConstraintName("FK_Customer_User")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DBContext.Models.CustomerPackagesLog", b =>
                {
                    b.HasOne("DBContext.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBContext.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBContext.Models.Customer", "Customer")
                        .WithMany("CustomerPackagesLog")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerPackagesLog_Customer")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DBContext.Models.PaymentPackage", "PaymentPackage")
                        .WithMany("CustomerPackagesLogs")
                        .HasForeignKey("PaymentPackageId")
                        .HasConstraintName("FK_CustomerPackagesLog_PaymentPackage")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DBContext.Models.FuelSupplier", b =>
                {
                    b.HasOne("DBContext.Models.Country", "Country")
                        .WithMany("FuelSupplier")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Supplier_Country")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DBContext.Models.ApplicationUser", "User")
                        .WithOne("FuelSupplier")
                        .HasForeignKey("DBContext.Models.FuelSupplier", "UserId")
                        .HasConstraintName("FK_Supplier_AspNetUsers")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DBContext.Models.Offer", b =>
                {
                    b.HasOne("DBContext.Models.FuelSupplier", "FuelSupplier")
                        .WithMany("Offer")
                        .HasForeignKey("FuelSupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DBContext.Models.OfferFuelType", b =>
                {
                    b.HasOne("DBContext.Models.FuelType", "FuelType")
                        .WithMany("OfferFuelType")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBContext.Models.Offer", "Offer")
                        .WithMany("OfferFuelType")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DBContext.Models.OfferPartyExcludes", b =>
                {
                    b.HasOne("DBContext.Models.Airport", "Airport")
                        .WithMany("OfferPartyExcludes")
                        .HasForeignKey("AirportId");

                    b.HasOne("DBContext.Models.AirportOffer", "AirportOffer")
                        .WithMany("OfferPartyExcludes")
                        .HasForeignKey("AirportOfferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBContext.Models.City", "City")
                        .WithMany("OfferPartyExcludes")
                        .HasForeignKey("CityId");

                    b.HasOne("DBContext.Models.Country", "Country")
                        .WithMany("OfferPartyExcludes")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("DBContext.Models.OfferProperties", b =>
                {
                    b.HasOne("DBContext.Models.Offer", "Offer")
                        .WithMany("OfferProperties")
                        .HasForeignKey("OfferId")
                        .HasConstraintName("FK_OfferProperties_Offer")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBContext.Models.Property", "Property")
                        .WithMany("OfferProperties")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK_OfferProperties_Property")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DBContext.Models.PaymentPackageFeature", b =>
                {
                    b.HasOne("DBContext.Models.Feature", "Feature")
                        .WithMany("PaymentPackageFeature")
                        .HasForeignKey("FeatureId")
                        .HasConstraintName("FK_PaymentPackageFeature_PaymentPackage");

                    b.HasOne("DBContext.Models.PaymentPackage", "PaymentPackage")
                        .WithMany("PaymentPackageFeature")
                        .HasForeignKey("PaymentPackageId")
                        .HasConstraintName("FK_PaymentPackageFeature_Feature");
                });

            modelBuilder.Entity("DBContext.Models.Request", b =>
                {
                    b.HasOne("DBContext.Models.Airport", "Airport")
                        .WithMany("Request")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBContext.Models.Customer", "Customer")
                        .WithMany("Request")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Request_Customer");
                });

            modelBuilder.Entity("DBContext.Models.RequestOffers", b =>
                {
                    b.HasOne("DBContext.Models.AirportOffer", "AirportOffer")
                        .WithMany("RequestOffers")
                        .HasForeignKey("AirportOfferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBContext.Models.Offer", "Offer")
                        .WithMany("RequestOffers")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBContext.Models.Request", "Request")
                        .WithMany("RequestOffers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DBContext.Models.SupplierContact", b =>
                {
                    b.HasOne("DBContext.Models.Contact", "Contact")
                        .WithMany("SupplierContact")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_SupplierContact_Contact");

                    b.HasOne("DBContext.Models.FuelSupplier", "FuelSupplier")
                        .WithMany("SupplierContact")
                        .HasForeignKey("FuelSupplierId")
                        .HasConstraintName("FK_SupplierContact_Supplier");
                });

            modelBuilder.Entity("DBContext.Models.SupplierContactPerson", b =>
                {
                    b.HasOne("DBContext.Models.FuelSupplier", "FuelSupplier")
                        .WithMany("SupplierContactPerson")
                        .HasForeignKey("FuelSupplierId")
                        .HasConstraintName("FK_SupplierContactPerson_Supplier");
                });

            modelBuilder.Entity("DBContext.Models.SupplierContactPersonContact", b =>
                {
                    b.HasOne("DBContext.Models.Contact", "Contact")
                        .WithMany("SupplierContactPersonContact")
                        .HasForeignKey("ContactId")
                        .HasConstraintName("FK_ContactPersonContacts_Contact");

                    b.HasOne("DBContext.Models.SupplierContactPerson", "SupplierContactPerson")
                        .WithMany("SupplierContactPersonContact")
                        .HasForeignKey("SupplierContactPersonId")
                        .HasConstraintName("FK_ContactPersonContacts_ContactPerson");
                });

            modelBuilder.Entity("DBContext.Models.SupplierProperties", b =>
                {
                    b.HasOne("DBContext.Models.Property", "Property")
                        .WithMany("SupplierProperties")
                        .HasForeignKey("PropertyId")
                        .HasConstraintName("FK_SupplierProperties_Property")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBContext.Models.FuelSupplier", "Supplier")
                        .WithMany("SupplierProperties")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_SupplierProperties_FuelSupplier")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DBContext.Models.SupplierReview", b =>
                {
                    b.HasOne("DBContext.Models.Customer", "Customer")
                        .WithMany("SupplierReview")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_SupplierReview_Customer");

                    b.HasOne("DBContext.Models.FuelSupplier", "FuelSupplier")
                        .WithMany("SupplierReview")
                        .HasForeignKey("FuelSupplierId")
                        .HasConstraintName("FK_SupplierReview_FuelSupplier");
                });

            modelBuilder.Entity("FuelServices.DBContext.Models.ResetPasswordToken", b =>
                {
                    b.HasOne("DBContext.Models.ApplicationUser", "User")
                        .WithMany("ResetPasswordTokens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FuelServices.DBContext.Models.SupplierPackagesLog", b =>
                {
                    b.HasOne("DBContext.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBContext.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBContext.Models.FuelSupplier", "FuelSupplier")
                        .WithMany("SupplierPackagesLog")
                        .HasForeignKey("FuelSupplierId")
                        .HasConstraintName("FK_FuelSupplierPackagesLog_Customer")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DBContext.Models.PaymentPackage", "PaymentPackage")
                        .WithMany("SupplierPackagesLogs")
                        .HasForeignKey("PaymentPackageId")
                        .HasConstraintName("FK_FuelSupplierPackagesLog_PaymentPackage")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DBContext.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DBContext.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DBContext.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DBContext.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DBContext.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DBContext.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
