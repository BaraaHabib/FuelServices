@model Site.Helpers.SimpleResponse
@using DBContext.Models
@using Microsoft.Extensions.Options
@using Site.Helpers
@inject IOptions<FuelServices.Site.Helpers.Stripe.StripeSettings> Stripe

<form id="BuyForm" asp-action="Pay" asp-route-RequestOfferId="@ViewBag.RequestOfferId" asp-antiforgery="true">
    <div class="col-md-12">
        <div class="">
            <label for="card-element">
                Credit or debit card
            </label>
            <div id="card-element">
                <!-- A Stripe Element will be inserted here. -->
            </div>

            <!-- Used to display form errors. -->
            <div id="card-errors" role="alert"></div>
        </div>
        <div class="col-md-12">
            <div id="submit-button" class="send-btn text-center  mt-3">
                <button id="submit-payment" type="submit" class="btn btn-info waves-effect waves-light">
                Pay <i class="fa fa-money ml-1 white-text"></i>
                </button>
            </div>
        </div>
    </div>
</form>

<script>
    function buy_request() {
        event.preventDefault();
        $("#BuyForm").validate({
            submitHandler: function (form) {
                form.submit();
            }
        });
    }

    var stripe =  Stripe('@Stripe.Value.PublishableKey');
    @*if (Stripe == undefined)
        $.loadScript('https://js.stripe.com/v3/', function () {
            stripe = Stripe('@Stripe.Value.PublishableKey');
        });
    else {
        stripe =  Stripe('@Stripe.Value.PublishableKey')
    }*@


        // Create an instance of Elements.
    var elements = stripe.elements();

        // Custom styling can be passed to options when creating an Element.
        // (Note that this demo uses a wider set of styles than the guide below.)
    var style = {
        base: {
            iconColor: '#c4f0ff',
            color: '#412424',
            fontWeight: 500,
            fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',
            fontSize: '16px',
            fontSmoothing: 'antialiased',
            ':-webkit-autofill': {
                color: '#fce883',
            },
            '::placeholder': {
                color: '#87BBFD',
            },
        },
        invalid: {
            iconColor: '#FFC7EE',
            color: '#ca1f1f',
        },
    };

        // Create an instance of the card Element.
    var card = elements.create('card', { style: style });

        // Add an instance of the card Element into the `card-element` <div>.
    card.mount('#card-element');

        // Handle real-time validation errors from the card Element.
    card.addEventListener('change', function (event) {
        var displayError = document.getElementById('card-errors');
        if (event.error) {
            displayError.textContent = event.error.message;
        } else {
            displayError.textContent = '';
        }
    });

        // Handle form submission.
    var form = document.getElementById('BuyForm');
    form.addEventListener('submit', function (ev) {
        ev.preventDefault();
        @if(@ViewBag.ClientSecret == null)
        {

        }
        $(".div_page_loader").show();
        stripe.confirmCardPayment("@ViewBag.ClientSecret", {
            payment_method: {
                card: card,
                billing_details: {
                    //packageType : 'Customer',
                    name:'@User.Identity.Name'
                }
            }
        }).then(function (result) {

            if (result.error) {
                // Show error to your customer (e.g., insufficient funds)
                $(".div_page_loader").hide();
                console.log(result.error.message);
                var displayError = document.getElementById('card-errors');
                displayError.textContent = result.error.message;

            } else {
                // The payment has been processed!
                if (result.paymentIntent.status === 'succeeded') {
                    // Show a success message to your customer
                    // There's a risk of the customer closing the window before callback
                    // execution. Set up a webhook or plugin to listen for the
                    // payment_intent.succeeded event that handles any business critical
                    // post-payment actions.
                    console.log(result);
                    form.submit();
                    //stripeTokenHandler(result.token);

                }
            }
        });
    });

    $(form).submit(function () {

        $.post('@Url.Action("Pay","Requests")',
            {
                RequestOfferId: @ViewBag.RequestOfferId
            },
            function (data, status) {

                $(".div_page_loader").hide();
                if (status == 'success') {
                    if (data.Code == @(Constants.ERROR_CODE)) {
                        toastr.success(data.Message, '', { positionClass: 'bottom-left' });
                    }
                    else {
                        toastr.error(data.Message, '', { positionClass: 'bottom-left' });
                    }
                }
                else {
                    toastr.error('server error', '', { positionClass: 'bottom-left' });
                }
            });
    })

        // Submit the form with the token ID.
    function stripeTokenHandler(token) {
        // Insert the token ID into the form so it gets submitted to the server
        var form = document.getElementById('BuyForm');
        var hiddenInput = document.createElement('input');
        hiddenInput.setAttribute('type', 'hidden');
        hiddenInput.setAttribute('name', 'stripeToken');
        hiddenInput.setAttribute('value', token.id);
        form.appendChild(hiddenInput);

        // Submit the form
        form.submit();
    }
</script>
